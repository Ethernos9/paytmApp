// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  phoneNumber String        @unique
  password    String
  createdAt   DateTime      @default(now())
  accounts    Account[]     // Relation to Account
  transactions Transaction[] // Relation to Transaction

  @@index([email]) // Ensure faster lookups by email
  @@index([phoneNumber]) // Ensure faster lookups by phone number
}

model Account {
  id            Int           @id @default(autoincrement())
  userId        Int
  accountNumber String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType   String        // Type of account (e.g., Savings, Wallet)
  balance       Decimal       @default(0.00) // Account-specific balance
  isDeleted     Boolean       @default(false) // Soft delete flag
  createdAt     DateTime      @default(now())
  transactions  Transaction[] // Relation to Transaction

  @@index([userId]) // Optimize lookups by user
}

model Transaction {
  id             Int                @id @default(autoincrement())
  userId         Int
  accountNumber  String
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  account        Account            @relation(fields: [accountNumber], references: [accountNumber], onDelete: Cascade)
  senderNumber   String             // Sender's phone number
  receiverNumber String             // Receiver's phone number
  amount         Decimal            @default(0.0) // Payment amount
  status         TransactionStatus  @default(PENDING) // Current transaction status
  description    String?            // Additional details about the transaction
  isDeleted      Boolean            @default(false) // Soft delete flag
  paymentRetries PaymentRetry[]     // Relation to PaymentRetry
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([userId])    // Optimize lookups for transactions by user
  @@index([accountNumber]) // Optimize lookups by account
  @@index([status])    // Optimize queries for filtering by transaction status
  @@index([senderNumber])  // Optimize searches by sender's number
  @@index([receiverNumber])  // Optimize searches by receiver's number
}

model PaymentRetry {
  id            Int        @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  attemptTime   DateTime   @default(now()) // Timestamp of retry attempt
  reason        String?    // Reason for retry (e.g., "Gateway Timeout")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}

